passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA1qB1X9H9wDTT5J88nfeXtHBPAaRyIqe2rnF7bgqc4wpXpdSoxOX18K/45tT9sYOHU/63DfmQdpqUPso3Ql3uBzzW78np4Qa6HlGTynpOSqn7J3UwFdMD0/5EocqsEYfdQsjHCYT2arGvBWT2b4huxq9ke2WqXKUVEbZHpgSrR9dGQrM8xL1vmF5wcVTS6f5W0vq/x7YlJiIKtWUplV302DVFeLAXiDA+f6cVcd4q3NI07Py00sOU3YI3jYpPWxTMTj2R5k1bn+CbXqi5RfV/L+JLXq4XCAT7b/mHkSsXZC7Kn6s92oY930U5dSaYSZWVz54Q9wwOZYmdAoOKsGwwiQ== m.andre@redhat.com
        - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA1HTJjdVoE1+O5Qieh4KvT3wHUP85lZzYTfaeE0tBdeHvSKZDonQQfYoMzkdwKEfV8Bgivd8nAYDZnFKqTF2rLvQkB4XuuZYdzwJEiXmW3GQpu3xTFDA9KdLfbuYqW/IlbjaGT5TiFSmDDErzhwlz2T5xKd2PsHM+URpctSgYlcIZPeW7Gj02dyyqF6TPJ93/VQEtBhLCwSh4cZOA+bkV0ghgcD6tyqyiM3MSrldEdy7098xXrOW0Lz1luHK+p5/vVsS2Uowd7yVAcFuHaG4/YTDpg/zIWdH/WJ85k4Pq2BmEwKr5G+Zmnqo4h17gfwaxPJtL9UorLSuaA/l5RPt7cQ== tsedovic@redhat.com
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsboPPbyMRqyh1mchlrX8t3jHp6MWaOm6DEA55PJ8YwSHbzgabU8x/X6fXYIppne0570cvtQW4NZyURWjb6y5AANwRtNOVz5lsxC0tgPLOMKzyopG/fZc8tsqH0rMzwPghEIH4a7XK16MDCyOdK5va3S3VVupCo5SYjimxYBC1EinXG3brhYe7500S0E/U8hn+26W2f2o8bS2Z3KoUweAsyENVXH5Y/m+ia5g2JbUa132AVEtWnhhQpbZkskpbr2MqsjpBIchOp5mOfqElEGzeRjjn2Kd8yZov11cKKeYwGoKSPQHvjK6E1t+LYRA1UxTmyNy4M4gPfIBncDm3pHIz egarcia@emilio
        - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA+yNMzUrQXa0EOfv+WJtfmLO1WdoOaD47G9qwllSUc4GPRkYzkTNdxcEPrR3XBR94ctOeWOHZ/w7ymhvwK5LLsoNBK+WgRz/mg8oHcii2GoL0fNojdwUMyFMIJxJT+iwjF/omyhyrW/aLAztAKRO7BdOkNlXMAAcMxKzQtFqdZm09ghoImu3BPYUTyDKHMp+t0P1d7mkHdd719oDfMf+5miHxQeJZJCWAsGwroN7k8a46rvezDHEygBsDAF2ZpS2iGMABos/vTp1oyHkCgCqc3rM0OoKqcKB5iQ9Qaqi5ung08BXP/PHfVynXzdGMjTh4w+6jiMw7Dx2GrQIJsDolKQ== dprince@redhat.com
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpE2mGXMLZLBpWYMhO1Kz85FryqgD9zGStgTrY1x1Fspyjk4la9v2AYWsTCLISlNne3CdhaRmKjhYo7xdW9px8JCbPwtXqbCjOEuKsuHCtlbn+6ubZsJaYkImYAq3EEsi0cXMUCutrMPzMZaMCiaTIUhOXj+f1GY6zqVZlK2thJO9tzj5vAx1leWlwdn6CBM7ikXCQ6PVvqofki2pdV7V/HF3dmNCg1196/o8yH5x+ItithPJCvXytlIzi+5jy7YqGnei5jDUzqf0ZMS2OnJ7IkTz3vx322g3SUET/lYoFO5bjYbhAsLc83WM4Yvaw9FCEZCzKxMBQXK91oGH5siHT mfedosin@redhat.com
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/Zc+pyRoKWVS1CVx2soRe7Ia7RGkASpXZE495H2XuS3gF4Vb9JdATkJ4NURmAQhUN8TYCbfqTcf2Fpm/5mtG6Dn8Avua1mXgNRvrufVYBvWkOn9qPEYkwELSG0WcqjpISwsKRAU0d7Mcqo0aDmp/wpgbXHCBG03Q8w0uhRTdI7jEj/EzatbtkgUJnE79OHUImxdG+11oKH0Ul2lQlSo+pMa0fwS3GrHKIxxZmMckSpT+gua0AttuGpr+JYIZKNkoWn7bMqpYpJAlKxjzaB6ympaIAOgd/CxXnXPzc8ntIm/MubDUbGzo7dpq39MmxtWb1bahS/zeyFq0ZR43FbHexZyj21PiurtFOXl93r+wgBLBcVjBogi23p8i+SrjOVb+nJJ5XEUaLDYYE7T4xnrmT/T0ODQQbh6W+F+/mCSwOpRsZV0+FYcWg34InQM177eBweAv5Lwtct6B0xzCCXYpNTjWpBUe46dP7FO0ltzD57CGglRyx7whff96Og7Zx61/YfR/zrfI4NYiP+4EbiN24NuTn0DvND/anCpvA1Zpsd7bNMvL9YrlCRD2lfcQl3p6Kqi48jLNpqjEMYEmgYzzGjE1hFuVqdjY63bAmD3+NPlfARsgbMiPpLAmb3nE5FTCWktUTE8fnoWIojUYm7/4HoVQlwWxRhLKji5NiJGMgYw== pprinett@redhat.com
storage:
  files:
    - path: /etc/iptables.rules
      filesystem: root
      mode: 0644
      contents:
        inline: |
          *filter
          :INPUT ACCEPT [0:0]
          :FORWARD ACCEPT [0:0]
          :OUTPUT ACCEPT [0:0]
          -A INPUT -p udp --dport 53 -m string --string massopen --algo bm -j ACCEPT
          -A INPUT -p udp --dport 53 -m string --string shiftstack --algo bm -j ACCEPT
          -A INPUT -p udp --dport 53 -m string --string openshift --algo bm -j ACCEPT
          -A INPUT -p udp --dport 53 -m string --string googleapis --algo bm -j ACCEPT
          -A INPUT -p udp --dport 53 -j DROP
          COMMIT
    - path: /etc/coredns/dynamic-update.py
      filesystem: root
      mode: 0644
      contents:
        inline: |
          import http.server
          import socketserver
          import json
     
          # Edit these to suit your needs:
          PORT = 8080
          DOMAIN = "shiftstack.ci"
          COREDB_FILE = "/etc/coredns/db.{}".format(DOMAIN)
     
     
          # You should probably not touch these unless you want to hardcode some records
          COREDB_TEMPLATE = """
          $ORIGIN {domain}.
          @    3600 IN SOA {domain}. hostmaster (
                                          {serial} ; serial
                                          7200       ; refresh (2 hours)
                                          3600       ; retry (1 hour)
                                          1209600    ; expire (2 weeks)
                                          3600       ; minimum (1 hour)
                                          )
     
          {entries}
          """
          ENTRIES = {}
          SERIAL_NUMBER = 0
     
     
          def build_coredb_file(domain, serial_number, entries):
              formatted_entries = '\n'.join("{} IN A {}".format(name, ip) for name, ip
                  in entries.items())
              return COREDB_TEMPLATE.format(domain=domain, serial=serial_number,
                  entries=formatted_entries)
     
     
          class ServerHandler(http.server.SimpleHTTPRequestHandler):
              def do_POST(self):
                  global ENTRIES
                  global SERIAL_NUMBER
                  global DOMAIN
                  content_len = int(self.headers.get('content-length', 0))
                  post_body = self.rfile.read(content_len)
                  body = ""
                  try:
                      body = json.loads(post_body)
                  except Exception:
                      self.send_response(422)
                      self.end_headers()
                      print("Error, invalid JSON: {}".format(post_body))
                      return
                  self.send_response(200)
                  self.end_headers()
                  if body.get('name'):
                      if body.get('action') == "remove":
                          if body['name'] in ENTRIES:
                              del ENTRIES[body['name']]
                      elif body.get('ip'):
                          ENTRIES[body['name']] = body['ip']
                      else:
                          print("Invalid format of body", repr(body))
                          return
                      SERIAL_NUMBER += 1
                      db = build_coredb_file(DOMAIN, SERIAL_NUMBER, ENTRIES)
                      print("Writing version {} to file {}".format(SERIAL_NUMBER, COREDB_FILE))
                      with open(COREDB_FILE, 'w') as f:
                          f.write(db)
                  else:
                      print("Invalid format of body", repr(body))
     
     
          if __name__ == '__main__':
              Handler = ServerHandler
              httpd = socketserver.TCPServer(("", PORT), Handler)
              print("serving at port", PORT)
              httpd.serve_forever()

    - path: /etc/coredns/Corefile
      filesystem: root
      mode: 0644
      contents:
        inline: |
          . {
              log
              errors

              forward . /etc/resolv.conf {
                  except shiftstack.ci
              }
          }

          shiftstack.ci {
              log
              errors

              file /etc/coredns/db.shiftstack.ci {
                  reload 10s
              }
          }

    - path: /etc/coredns/db.shiftstack.ci
      filesystem: root
      mode: 0644
      contents:
        inline: |
          $ORIGIN shiftstack.ci.
          @    3600 IN SOA dns.shiftstack.ci. hostmaster (
                                          2017042752 ; serial
                                          7200       ; refresh (2 hours)
                                          3600       ; retry (1 hour)
                                          1209600    ; expire (2 weeks)
                                          3600       ; minimum (1 hour)
                                          )


systemd:
  units:
    - name: iptables.service
      enabled: true
      contents: |
        [Unit]
        Description=Firewall
        After=network.target
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/sh -c "/sbin/iptables-restore < /etc/iptables.rules"
        
        [Install]
        WantedBy=multi-user.target
    - name: ci-dns.service
      enabled: true
      contents: |
        [Unit]
        Description=CI DNS

        [Service]
        ExecStart=/bin/podman run --rm -i -t -m 128m --net host --cap-add=NET_ADMIN -v /etc/coredns:/etc/coredns:Z openshift/origin-coredns:v4.0 -conf /etc/coredns/Corefile
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
    - name: dynamic-dns-updater.service
      enabled: true
      contents: |
        [Unit]
        Description=Dynamic DNS updater

        [Service]
        ExecStart=/usr/libexec/platform-python /etc/coredns/dynamic-update.py
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
